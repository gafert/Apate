# Descriptions per stages

# FETCH
- instr: [] # If this infoText is on depending on the instruction, empty is all
  start: fetch # Defines where the stage starts, see CPU_STATE_IDS
  infos:
    - text: > # The text displayed
        You reached the <div class="wikilink" onclick="navigateInAngular('/home/wiki?fetchstage')">Fetch Stage</div>.
        <br><br>
        The next instruction is read from the <div class="module memory">Memory</div>.
      focusArea: overview # focusArea to go to, will be appended with areaborder_
      focusElement: fetch # focusElement to go to after focusArea has been selected, will be appended with focus_
      highlight: [] # The elements that should be highlighted
    - text: >
        Pass the current Program Counter <div class="port">PC</div> as the address to the <div class="module memory">Memory</div>.
        <br><br>
        You can see what the memory does in the memory tab on the right.
      highlight: [p_pc-0001, s_pc-0002]
    - text: >
        Loaded a new instruction from the <div class="module memory">Memory</div> at the address of the Program Counter <div class="port">PC</div>.
      highlight: [m_memoryfetchinstr-0003]
      exec: fetch
    - text: Pass the unparsed 32 bit long instruction data into <div class="module controlunit">Control Unit</div> to be decoded.
      highlight: [s_instrmemread-0000]
      focusElement: fetchpass
# DECODE
- instr: []
  start: decode
  infos:
    - text: >
        You reached the <div class="wikilink" onclick="navigateInAngular('/home/wiki?decoderstage')">Decoder Stage</div>.
        <br><br>
        The unparsed instruction will be parsed and all the signals will be filled to control the CPU. For now the signals are unknown as they are not parsed yet.
      highlight: []
      focusElement: decoder
    - text: >
        In the <div class="module controlunit">Control Unit</div> the instruction is decoded into different signals used throughout the CPU.
        These values include...
        <br><br>
        Control Signals:<br>
        <div class="controlsignal">INSTRUCTION</div> Instruction name <br>
        <div class="controlsignal">LUI</div>, <div class="controlsignal">OP</div> etc. will be active depending on the
        <div class="wikilink" onclick="navigateInAngular('/home/wiki?opcode')">Opcode</div> . <br><br>

        Parsed Data:<br>
        <div class="port">IMM</div> Immediate value <br>
        <div class="port">RS1</div> Register Source 1 <br>
        <div class="port">RS2</div> Register Source 2 <br>
        <div class="port">RD</div> Return Address <br>
      highlight: []
      from: m_controlunit
      focusArea: cu
    - text: >
        First, parse the <div class="wikilink" onclick="navigateInAngular('/home/wiki?opcode')">Opcode</div> by comparing the first 7 bits (0-6) of the unparsed instruction data.
        <br><br>
        The Opcode tells the CPU how to parse the instruction and what values are used throughout the CPU.
        Once the Opcode is parsed we know which elements of the CPU are not used, these will be hidden.
        <br><br>
        As you can see some elements are hidden now. You can ignore all hidden elements.
      highlight: []
      focusElement: cu_instr_group
      exec: decode
    - text: >
        Secondly, we can parse other values in the instruction. Which values are used in this instruction can be seen in the
        <div class="wikilink" onclick="navigateInAngular('/home/wiki?instruction_table')">Instruction Table</div>.
        Not used signals are hidden.
        <br><br>
        <div class="port">FUNCT3</div> and <div class="port">FUNCT7</div> are only used inside the <div class="module controlunit">Control Unit</div>
        and used to determine the instruction name stored in <div class="controlsignal">INSTRUCTION</div>
      highlight: []
      focusElement: cu_static_values
    - text: >
        Thirdly, depending on the <div class="wikilink" onclick="navigateInAngular('/home/wiki?opcode')">Opcode</div> and therefore the
        <div class="wikilink" onclick="navigateInAngular('/home/wiki?instructiontype')">Instruction Type</div> the Immediate value
        <div class="port">IMM</div> can reside on different bit combinations.
        <br><br>
        The used bit combination is shown. All bit combinations can be seen in the <div class="wikilink" onclick="navigateInAngular('/home/wiki?instructiontype')">Instruction Type</div> list.
      highlight: []
      focusElement: cu_immediates
    - text: >
        Lastly, the instruction name is parsed and stored in <div class="controlsignal">INSTRUCTION</div>. This name corresponds to the command used in assembly.
        <br><br>
        The instruction depends on <div class="port">FUNCT3</div>, <div class="port">FUNCT7</div> and <div class="port">IMM</div> and their combination. These can be seen in the
        <div class="wikilink" onclick="navigateInAngular('/home/wiki?instructiontable')">Instruction Table</div>.
        <br><br>
        In case of <div class="controlsignal">JALR</div>, <div class="controlsignal">JAL</div>, <div class="controlsignal">LUI</div> and
        <div class="controlsignal">AUIPC</div> the instruction name is equal to the Opcode parsed in the first decoding stage. In the case of these no further differentiation is required.
        <br><br>
        The name can also be seen on the left in the instruction tab.
      highlight: [ ]
      focusElement: cu_instruction
- instr: [op, imm, load, jalr, store, branch]
  infos:
    - text: >
        <div class="port">RS1 ADDR</div> and <div class="port">RS2 ADDR</div> are only the addresses to values in the <div class="module registers">Registers</div>.
        <br><br>
        These values are now read from the <div class="module registers">Registers</div> and passed to <div class="port">RS1</div> and <div class="port">RS2</div> in the <div class="port">Data Path</div>.
      focusArea: overview
      focusElement: decoderregisters
      highlight: [m_reg2-0080, m_reg1-0077]
- instr: []
  infos:
    - text: >
        All parsed values are now passed to the <div class="controlsignal">Control Path</div> and the <div class="port">Data Path</div>.
        <br><br>
        The <div class="controlsignal">Control Path</div> contains all values which control the CPU in some way.
        The <div class="port">Data Path</div> contains data used inside the CPU.
      focusElement: decoder
      focusArea: overview
      highlight: [s_instr-0064, m_controlpath-0074, w_op-0066, w_imminstr-0065, w_load-0067, w_branch-0069, w_jal-0070, w_jalr-0071, w_lui-0072, w_auipc-0073, s_rd-0082, s_imm-0081, p_rd-0369,p_imm-0371, p_rs1-0372, p_rs2-0370]
# EXECUTE
- instr: []
  start: execute
  infos:
    - text: >
        You reached the <div class="wikilink" onclick="navigateInAngular('/home/wiki?entry')">Execution Stage</div>.
        <br><br>
        This stage consists of three blocks: <div class="module alu">ALU</div>, <div class="module memory">Memory</div>, and <div class="module branchevaluator">Branch Evaluator</div>.
        Depending on the opcode only one of these blocks is used.
      focusElement: execute
      highlight: []
- instr: [imm]
  infos:
    - text: Pass <div class="port">IMM</div> into Operator 1 of the <div class="module alu">ALU</div>.
      highlight: [p_imm-0009, s_imm-0008, m_mux_immrs2-0004, s_immrs2-0005, m_mux_immrs2pcimm-0019, s_op1-0014]
      focusElement: alu
    - text: Pass <div class="port">RS1</div> into Operator 2 of the <div class="module alu">ALU</div>.
      highlight: [p_rs1-0033, s_rs1-0032, m_mux_rs1412-0020, s_op2-0016]
- instr: [op]
  infos:
    - text: Pass <div class="port">RS2</div> into Operator 1 of the <div class="module alu">ALU</div>.
      focusElement: alu
      highlight: [p_rs2-0006, s_rs2-0007, m_mux_immrs2-0004, s_immrs2-0005, m_mux_immrs2pcimm-0019, s_op1-0014]
    - text: Pass <div class="port">RS1</div> into Operator 2 of the <div class="module alu">ALU</div>.
      highlight: [p_rs1-0033, s_rs1-0032, m_mux_rs1412-0020, s_op2-0016]
- instr: [jal, jalr]
  infos:
    - text: Pass <div class="port">PC</div> into Operator 1 of the <div class="module alu">ALU</div>.
      focusElement: alu
      highlight: [p_pc-0026, s_pc-0027, m_mux_immrs2pcimm-0019, s_op1-0014]
    - text: Pass <div class="port">4</div> into Operator 2 of the <div class="module alu">ALU</div>.
      highlight: []
- instr: [lui, auipc]
  infos:
    - text: Pass <div class="port">IMM</div> into Operator 1 of the <div class="module alu">ALU</div>.
      focusElement: alu
      highlight: [p_imm-0024, s_imm-0025, m_mux_immrs2pcimm-0019, s_op1-0014]
    - text: Pass <div class="port">12</div> into Operator 2 of the <div class="module alu">ALU</div>.
      highlight: [p_12-0028, s_12-0029, m_mux_rs1412-0020, s_op2-0016]
- instr: [imm, op, jal, jalr, lui, auipc]
  infos:
    - text: >
        The Arithemtic Logic Unit <div class="module alu">ALU</div> is used to perform calculations on Operator 1 and Operator 2
        depending on the value of the <div class="controlsignal">INSTRUCTION</div>.
        <br><br>
        Hover over the elements to see their function.
      focusArea: alu
      highlight: [ ]
    - text: The calculate value is stored in the Output signal <div class="port">OUT</div>.
      exec: execute
      highlight: [ ]
- instr: [auipc]
  infos:
    - text: >
        The current instruction is AUIPC (Add Upper Immediate to Program Counter).
        The Upper Immediate value was already calculated by the <div class="module alu">ALU</div> and is now in the <div class="port">OUT</div> signal.
        This value needs to be added to the <div class="port">PC</div> before it is stored in the Register.
      focusElement: alu
      focusArea: overview
      highlight: [p_pc-0011, s_pc-0012, m_addpcalu-0010, s_pcaluout-0013, m_mux_pcaluout-0017]
- instr: [imm, op, jal, jalr, lui]
  infos:
    - text: Pass the <div class="port">OUT</div> of the <div class="module alu">ALU</div> to the <div class="module registers">Registers</div>.
      focusElement: alupass
      focusArea: overview
      highlight: [s_aluout-0018, m_mux_pcaluout-0017, s_regwrite-0084]
- instr: [store]
  infos:
    - text: The memory address is always an addition of <div class="port">RS1</div> and <div class="port">IMM</div>.
      focusElement: memory
      highlight: [s_rs1imm-0134,s_rs1-0135,s_imm-0137,p_imm-0138,p_rs1-0136,m_addrs1imm-0139  ]
    - text: The data to be stored is always <div class="port">RS2</div>
      highlight: [p_rs2-0131, s_rs2-0132]
    - text: Next the data of <div class="port">RS2</div> will be stored in the <div class="module memory">Memory</div>. Watch the memory tab to see the change.
      highlight: [m_memoryfetch-0133]
    - text: The data has been stored in the <div class="module memory">Memory</div>.
      exec: execute
      highlight: []
- instr: [load]
  infos:
    - text: The memory address is always an addition of <div class="port">RS1</div> and <div class="port">IMM</div>. As this is a LOAD instruction no data is needed.
      focusElement: memory
      highlight: [s_rs1imm-0134,s_rs1-0135,s_imm-0137,p_imm-0138,p_rs1-0136,m_addrs1imm-0139  ]
    - text: Next the value is loaded from the <div class="module memory">Memory</div> into the <div class="port">READ</div> value. Check the memory tab on the right.
      exec: execute
      highlight: [m_memoryfetch-0133]
    - text: The value of <div class="port">READ</div> is passed to the <div class="module registers">Registers</div> to be saved.
      focusElement: memorypass
      highlight: [s_memread-0142, m_mux_pcaluout-0017, s_regwrite-0084]
- instr: [branch]
  infos:
    - text: The <div class="module branchevaluator">Branch Evaluator</div> compares <div class="port">RS1</div> and <div class="port">RS2</div> with methods depending on the instruction.
      highlight: []
      focusElement: branch
    - text: <div class="port">RS1</div> and <div class="port">RS2</div> are passed to the compare method depending on the instruction. The multiplexer decides on the method.
      highlight: [p_rs1-0125,s_rs1-0127,s_rs2-0128,p_rs2-0126]
    - text: The correct comparison is selected by the MUX an passed to <div class="port">OUT</div>. The result of the comparison is stored in <div class="port">OUT</div> and is either 1 or 0.
      focusArea: be
      highlight: [p_branchresult-0350]
      exec: execute
- instr: [branch]
  if: !!js/function  'function (bindings) { return bindings.branchResult.value == true; }'
  infos:
    - text: Use the result from the <div class="module branchevaluator">Branch Evaluator</div> to select <div class="port">IMM</div>.
      focusArea: overview
      focusElement: branch
      highlight: [p_imm-0118,s_imm-0119,s_branchresult-0123,m_mux_4imm-0122]
    - text: Pass <div class="port">IMM</div> to the next stage.
      focusElement: branchpass
      highlight: [ s_branchadd-0117 ]
- instr: [branch]
  if: !!js/function  'function (bindings) { return bindings.branchResult.value == false; }'
  infos:
    - text: Use the result from the <div class="module branchevaluator">Branch Evaluator</div> to select 4.
      focusArea: overview
      focusElement: branch
      highlight: [s_4-0121,p_4-0120,s_branchresult-0123,m_mux_4imm-0122]
    - text: Pass 4 to the next stage.
      focusElement: branchpass
      highlight: [s_branchadd-0117]
# WRITE BACK
- instr: []
  start: writeback
  infos:
    - text: >
        This stage is called <div class="wikilink" onclick="navigateInAngular('/home/wiki?writebackstage')">Write Back Stage</div>.
        <br><br>
        Depending on the instruction either a value from the <div class="module alu">ALU</div> or
        the loaded value from the <div class="module memory">Memory</div> will be stored in the <div class="module registers">Registers</div>.
        The register address is set by <div class="port">RD</div>
      focusElement: writeback
      highlight: []
- instr: [load, imm, op, jal, jalr, lui, auipc]
  infos:
    - text: >
        Store the value of <div class="module memory">Memory</div> or <div class="module alu">ALU</div>
        to the <div class="module registers">Registers</div> at the location of the Return Address <div class="port">RD</div>.
        Watch the register tab to see how the value is written.
      focusElement: writeback
      highlight: [m_regwrite-0086]
    - text: The value has been stored in the <div class="module registers">Registers</div>.
      highlight: []
      exec: writeback
- instr: [branch]
  infos:
    - text: In BRANCH instructions no data needs to be written to the <div class="module registers">Registers</div>.
      focusElement: writeback
      exec: writeback
      highlight: []
- instr: [store]
  infos:
    - text: In STORE instructions no data needs to be written to the <div class="module registers">Registers</div>.
      focusElement: writeback
      exec: writeback
      highlight: []
# ADVANCE PROGRAM COUNTER
- instr: []
  start: advanceprogramcounter
  infos:
    - text: >
        This stage is called <div class="wikilink" onclick="navigateInAngular('/home/wiki?advpcstage')">Advance Program Counter Stage</div>.
        <br><br>
        The new <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> will be set depending on the instruction.
        If the Program Counter is set, the CPU will return to the
        <div class="wikilink" onclick="navigateInAngular('/home/wiki?fetchstage')">Fetch Stage</div>.
      focusElement: pc
      highlight: []
- instr: [branch]
  infos:
    - text: >
        The result of the <div class="module branchevaluator">Branch Evaluator</div> which is either 4 or <div class="port">IMM</div>
        is added to the <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> <div class="port">PC</div>.
        This is because <div class="module branchevaluator">Branch Evaluator</div> decide if the
        <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> should continue normally to the
        next instruction (4 memory locations -> 4 bytes -> one 32 bit instruction) or jump to a new location which is the value of
        <div class="port">IMM</div> + <div class="port">PC</div>.
        <br><br>Watch the instruction tab on the left to see the <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> jump to the next instruction.
      focusElement: pc
      highlight: []
- instr: [jal]
  infos:
    - text: >
        Pass <div class="port">IMM</div> to be added to the current <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> <div class="port">PC</div>
        and set to the new <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div>.
        <br><br>
        This means we will jump to a different location in the program and not to the adjacent.
        <br><br>
        Watch the instruction tab on the left to see the <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> jump to the next instruction.
      focusElement: pc
      highlight: []
- instr: [jalr]
  infos:
    - text: >
        Add Register Source 1 and Immediate to set the new <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div>.
        <br><br>
        This means we will jump to a different location in the program and not to the adjacent.
        <br><br>a
        Watch the instruction tab on the left to see the <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> jump to the next instruction.
      focusElement: pc
      highlight: []
- instr: [store, imm, op, lui, load, auipc]
  infos:
    - text: >
        This instruction advances th <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> normally by 4.
        <br><br>
        Why 4?
        <br>
        The <div class="controlsignal">PC</div> always points to the first byte of the next instruction. As one instruction
        is 32 bits long each instruction is offset by 4 bytes. If the Program Counter is 4 the second instruction is used. If the PC is 8 the third instruction is used.
        <br><br>
        Watch the instruction tab on the left to see the <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> jump to the next instruction.
      focusElement: pc
      highlight: []
- instr: []
  infos:
    - text: >
        New <div class="wikilink" onclick="navigateInAngular('/home/wiki?pc')">Program Counter</div> set.
        <br><br>This cycle is complete. All signals not used in the next cycle have been reset.
        The CPU will now go to the <div class="wikilink" onclick="navigateInAngular('/home/wiki?fetchstage')">Fetch Stage</div>.
      exec: advanceprogramcounter
      highlight: []
