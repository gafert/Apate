/**
  * Generated by bindgen.py
  * Date: 2020-07-19 15:06:51.946225
  *
  * Usage in your own code:
  * --------------------------------------------------
  * import bindings from "./bindingSubjects.ts";
  *
  */
import {BehaviorSubject} from "rxjs";
import { Instruction } from './instructionParser';

export enum CPU_STATES {
  READ_DATA_FROM_MEMORY = "Read form memory",
  DECODE_INSTRUCTION = "Decode instruction",
  EXECUTE = "Execute instruction",
  WRITE_BACK = "Write back",
  ADVANCE_PC = "Advance PC",
  BREAK = "Break"
}

export class Bindings {
  public bufferWriteCallbacks = [];
  public callBufferWriteCallbacks(character) {
    for (const callback of this.bufferWriteCallbacks) {
      callback(character);
    }
  }
  public addBufferWriteCallback(fun) {
    this.bufferWriteCallbacks.push(fun);
  }

  // Memory
  public memory = new BehaviorSubject(Buffer.alloc(512, 0));
  public memAddress = new BehaviorSubject(null);
  public memReadData = new BehaviorSubject(null);
  public memWriteData = new BehaviorSubject(null);

  // Registers
  public cpuregs = new BehaviorSubject<number[]>(new Array(32).fill(0));

  // Data path
  public pc = new BehaviorSubject<number>(0);
  public rd = new BehaviorSubject<number>(0);
  public imm = new BehaviorSubject<number>(0);
  public rs1addr = new BehaviorSubject<number>(0);
  public rs2addr = new BehaviorSubject<number>(0);
  public rs1 = new BehaviorSubject<number>(0);
  public rs2 = new BehaviorSubject<number>(0);

  // At ALU
  public imm_rs2 = new BehaviorSubject<number>(0);
  public op1 = new BehaviorSubject<number>(0);
  public op2 = new BehaviorSubject<number>(0);
  public aluout = new BehaviorSubject<number>(0);
  public pc_aluout = new BehaviorSubject<number>(0);
  public mux_aluout = new BehaviorSubject<number>(0);
  public regwrite = new BehaviorSubject<number>(0);

  // At load store
  public rs1_imm = new BehaviorSubject<number>(0);
  public memread = new BehaviorSubject<number>(0);

  // Branch
  public branchResultBEQ = new BehaviorSubject<number>(0);
  public branchResultBNE = new BehaviorSubject<number>(0);
  public branchResultBLT = new BehaviorSubject<number>(0);
  public branchResultBGE = new BehaviorSubject<number>(0);
  public branchResult = new BehaviorSubject<number>(0);

  // PC
  public branchAddResult = new BehaviorSubject<number>(0);
  public pcAdd = new BehaviorSubject<number>(0);
  public pcAdvOther = new BehaviorSubject<number>(0);
  public pcAdvJALR = new BehaviorSubject<number>(0);
  public pcAdv = new BehaviorSubject<number>(0);

  public values = {
    'pc': this.pc,
    'rd': this.rd,
    'imm': this.imm,
    'rs1addr': this.rs1addr,
    'rs2addr': this.rs2addr,
    'rs1': this.rs1,
    'rs2': this.rs2,
    'imm_rs2': this.imm_rs2,
    'op1': this.op1,
    'op2': this.op2,
    'aluout': this.aluout,
    'pc_aluout': this.pc_aluout,
    'mux_aluout': this.mux_aluout,
    'regwrite': this.regwrite,
    'rs1_imm': this.rs1_imm,
    'memread': this.memread,
    'beq': this.branchResultBEQ,
    'bne': this.branchResultBNE,
    'blt': this.branchResultBLT,
    'bge': this.branchResultBGE,
    'branch': this.branchResult,
    'branch_add': this.branchAddResult,
    'pc_add': this.pcAdd,
    'pc_adv_other': this.pcAdvOther,
    'pc_adv_jalr': this.pcAdvJALR,
    'pc_adv': this.pcAdv
  }

  // State
  public nextCpuState = new BehaviorSubject<CPU_STATES>(null);
  public cpuState = new BehaviorSubject<CPU_STATES>(null);

  // Decoder
  public instruction = new BehaviorSubject<Instruction>(null);

  constructor() {

  }


}
