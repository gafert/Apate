/**
  * Generated by bindgen.py
  * Date: 2020-07-19 15:06:51.946225
  *
  * Usage in your own code:
  * --------------------------------------------------
  * import bindings from "./bindingSubjects.ts";
  *
  */
import {BehaviorSubject} from "rxjs";
import { Instruction } from './instructionParser';

export enum CPU_STATES {
  READ_DATA_FROM_MEMORY = "Read form memory",
  DECODE_INSTRUCTION = "Decode instruction",
  EXECUTE = "Execute instruction",
  WRITE_BACK = "Write back",
  ADVANCE_PC = "Advance PC",
  BREAK = "Break"
}

export class Bindings {
  public bufferWriteCallbacks = [];
  public callBufferWriteCallbacks(character) {
    for (const callback of this.bufferWriteCallbacks) {
      callback(character);
    }
  }
  public addBufferWriteCallback(fun) {
    this.bufferWriteCallbacks.push(fun);
  }

  // Memory
  public memory = new BehaviorSubject(Buffer.alloc(512, 0));
  public memAddress = new BehaviorSubject(null);
  public memReadData = new BehaviorSubject(null);
  public memWriteData = new BehaviorSubject(null);

  // Registers
  public cpuregs = new BehaviorSubject<number[]>(new Array(32).fill(0));
  public regAddress = new BehaviorSubject(null);
  public regReadData = new BehaviorSubject(null);
  public regWriteData = new BehaviorSubject(null);

  // Data path
  public pc = new BehaviorSubject<number>(null);
  public rd = new BehaviorSubject<number>(null);
  public imm = new BehaviorSubject<number>(null);
  public rs1addr = new BehaviorSubject<number>(null);
  public rs2addr = new BehaviorSubject<number>(null);
  public rs1 = new BehaviorSubject<number>(null);
  public rs2 = new BehaviorSubject<number>(null);

  // State
  public nextCpuState = new BehaviorSubject<CPU_STATES>(null);
  public cpuState = new BehaviorSubject<CPU_STATES>(null);

  // Decoder
  public instruction = new BehaviorSubject<Instruction>(null);

  // Alu
  public op1 = new BehaviorSubject(null);
  public op2 = new BehaviorSubject(null);

  constructor() {

  }


}
